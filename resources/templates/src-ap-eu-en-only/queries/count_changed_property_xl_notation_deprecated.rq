# basic namespaces
PREFIX align: <http://knowledgeweb.semanticweb.org/heterogeneity/alignment#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dsv: <http://purl.org/iso25964/DataSet/Versioning#>
PREFIX eurovoc: <http://eurovoc.europa.eu/>
PREFIX euvoc: <http://publications.europa.eu/ontology/euvoc#>
PREFIX label: <http://publications.europa.eu/resource/authority/label-type/>
PREFIX lemon: <http://lemon-model.net/lemon#>
PREFIX lexinfo: <http://www.lexinfo.net/ontology/2.0/lexinfo#>
PREFIX lexvo: <http://lexvo.org/ontology#>
PREFIX oldevo: <http://eurovoc.europa.eu/schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
PREFIX sh: <http://purl.org/skos-history/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX skosxl: <http://www.w3.org/2008/05/skos-xl#>
PREFIX status: <http://publications.europa.eu/resource/authority/concept-status/>
PREFIX thes: <http://purl.org/iso25964/skos-thes#>
PREFIX vb: <http://art.uniroma2.it/ontologies/vocbench#>
PREFIX xhv: <http://www.w3.org/1999/xhtml/vocab#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Show all movements cross property
SELECT (count(distinct *) as ?entries)
WHERE {
          GRAPH ?versionHistoryGraph {
    # parameters
    VALUES ( ?versionHistoryGraph ?oldVersion ?newVersion ?class ?oldProperty)
     {
    (undef
    undef
    undef
    euvoc:XlNotation 
    owl:deprecated 
    )
    }
# get the current and the previous version as default versions
    ?versionset dsv:currentVersionRecord/xhv:prev/dc:identifier ?previousVersion .
    ?versionset dsv:currentVersionRecord/dc:identifier ?latestVersion .
# select the versions to actually use
    BIND(coalesce(?oldVersion, ?previousVersion) AS ?oldVersionSelected)
    BIND(coalesce(?newVersion, ?latestVersion) AS ?newVersionSelected)
    # get the delta and via that the relevant graphs
        ?delta a sh:SchemeDelta ;
    sh:deltaFrom/dc:identifier ?oldVersionSelected ;
    sh:deltaTo/dc:identifier ?newVersionSelected ;
    sh:deltaFrom/sh:usingNamedGraph/sd:name ?oldVersionGraph ;
    sh:deltaTo/sh:usingNamedGraph/sd:name ?newVersionGraph ;
    dct:hasPart ?insertions ;
    dct:hasPart ?deletions .
    ?deletions a sh:SchemeDeltaDeletions ;
    sh:usingNamedGraph/sd:name ?deletionsGraph .
    ?insertions a sh:SchemeDeltaInsertions ;
    sh:usingNamedGraph/sd:name ?insertionsGraph .
    }
    # get instance with a property and value
    GRAPH ?newVersionGraph {

    ?instance a ?class .
    ?instance ?newProperty ?value .
    
    optional {
      ?instance skos:prefLabel ?prefLabelEn .
      FILTER (lang(?prefLabelEn) = "en")
    }
    
    
    BIND (?prefLabelEn AS ?prefLabel)
    
    }
    # the instance from the old version should have another property and but same value
    GRAPH ?oldVersionGraph {
    ?instance a ?class .
    ?instance ?oldProperty ?value .
    }
    # new property and value should be inserted
    GRAPH ?insertionsGraph {
    ?instance ?newProperty ?value .
    }
    # the old property with value shall be deleted
    GRAPH ?deletionsGraph {
    ?instance ?oldProperty ?value .
    }
    FILTER( ?newProperty != ?oldProperty)
    }
ORDER BY ?instance